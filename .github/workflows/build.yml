name: Build and Test

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
      - labeled

  push:
    branches:
      - master
      - main
      - github-action-*
    paths-ignore:
      - '**.md'

jobs:
  check_build_safety:
    name: Check if Build should be done
    runs-on: ubuntu-latest
    steps:
      - name: Supress builds for PRs from branch github-action-*
        if: github.event.pull_request && contains(github.head_ref, 'github-action')
        run: |
          echo "not building PRs with source branch github-action-*"
          exit 1
      - name: Emit failure code for unsafe fork PRs
        if: github.event.pull_request && github.event.pull_request.head.repo.full_name != 'deepy/liquibase-private' && github.event.label.name != 'SafeToBuild'
        run: |
          echo "PR from Fork is NOT safe to build"
          echo "A member of Liquibase team needs to apply label 'SafeToBuild'! "
          exit 1
      - name: Run needed builds
        if: github.event.action == 'labeled' && github.event.pull_request.head.repo.full_name == 'deepy/liquibase-private'
        run: |
          echo "Don't run liquibase/liquibase builds on labels"
          exit 1
  setup:
    name: Setup
    needs: check_build_safety
    runs-on: ubuntu-latest
    outputs:
      thisSha: ${{ steps.find-branches.outputs.thisSha }}
      thisBranchName: ${{ steps.find-branches.outputs.thisBranchName }}
      thisBranchFileName: ${{ steps.find-branches.outputs.thisBranchFileName }}
      thisRepositoryName: ${{ steps.find-branches.outputs.thisRepositoryName }}
      thisRepositoryOwner: ${{ steps.find-branches.outputs.thisRepositoryName }}
      standAlonePR: ${{ steps.find-branches.outputs.standAlonePR }}
      stablePro: ${{ steps.find-branches.outputs.stablePro }}
      setupSuccessful: "true"
    steps:
      - name: Failsafe
        uses: actions/github-script@v6
        with:
          script: |
            if (${{ github.run_attempt }} % 5 == 0) {
              core.setFailed("Fail every 5 run attempts to catch accidental infinite loops");
            }


      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Find corresponding branches
        id: find-branches
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});

            core.setOutput("thisSha", helper.getCurrentSha());
            core.setOutput("thisBranchName", helper.getCurrentBranch());
            core.setOutput("thisBranchFileName", helper.getCurrentBranch().replace(/[^a-zA-Z0-9\-_]/g, "_"));
            core.setOutput("thisRepoName", helper.getRepositoryName());
            core.setOutput("thisRepoOwner", helper.getRepositoryOwner());

            let proStatusMessage = "success";
            let proFailed = false;

            core.setOutput("standAlonePR", true);

      - name: Upload Event File
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}

  build:
    name: Build & Test (Java ${{ matrix.java }} ${{ matrix.os }})
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-2019 ]
        java: [ 8, 11, 17, 18 ]
        exclude:
          # exclude non-java 8 on macos and windows builds
          - os: macos-latest
            java: 11
          - os: windows-2019
            java: 11
          - os: macos-latest
            java: 17
          - os: windows-2019
            java: 17
          - os: macos-latest
            java: 18
          - os: windows-2019
            java: 18
    runs-on: ${{ matrix.os }}
    env:
      OS_TYPE: ${{ matrix.os }}
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME }}
      GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      - name: Built Code Cache
        if: ${{ matrix.java == 8}}
        uses: actions/cache@v3.0.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'maven'
      - name: Build & Test
        run: |
          mvn -B "-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}" "-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}" "-Dbuild.branch=${{ needs.setup.outputs.thisBranchName }}" "-Dbuild.number=${{ github.run_number }}" "-Dbuild.commit=${{ needs.setup.outputs.thisSha }}" "-DtrimStackTrace=false" -pl '!liquibase-dist' clean test package surefire-report:report
      - name: Remove Original Jars for *nix
        if: env.OS_TYPE != 'windows-2019'
        run: |
          find . -name original-*.jar -exec rm {} \;


      - name: Archive Test Results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-test-results-jdk${{ matrix.java }}
          path: |
            ./**/target/surefire-reports
            ./**/target/site

      - name: Archive Modules
        if: ${{ matrix.java == 8 && matrix.os == 'ubuntu-latest'}}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-modules
          path: |
            */target/*-0-SNAPSHOT.jar

  sonar:
    name: Sonar Scan (fake)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'adopt'
          cache: 'maven'
      - name: Build and analyze
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
            GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME }}
            GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
        run: mvn clean verify -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testSystem:
          - h2
          #          - h2:1.4
          - hsqldb
          - mariadb
          - mssql
          - mysql
          - oracle
          - postgresql
          - sqlite
    needs: build
    timeout-minutes: 30
    env:
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME }}
        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Prepare
        id: prepare
        uses: actions/github-script@v6
        with:
          script: |
            core.setOutput("testResultsArtifact", "liquibase-test-results-integration-${{ matrix.testSystem }}".replace(/[^a-zA-Z0-9\-_]/g, "_"));

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'
      - name: Restore Built Code Cache
        uses: actions/cache@v3.0.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target

      - name: Run Tests
        run: mvn -B jar:jar jar:test-jar surefire:test -DtrimStackTrace=false -Dliquibase.sdk.testSystem.test=${{ matrix.testSystem }} -Dliquibase.sdk.testSystem.acceptLicenses=${{ matrix.testSystem }} -Dtest=*IntegrationTest,*ExecutorTest -DfailIfNoTests=false -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120

      - name: Archive Test Results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepare.outputs.testResultsArtifact }}
          path: |
            ./**/target/surefire-reports
